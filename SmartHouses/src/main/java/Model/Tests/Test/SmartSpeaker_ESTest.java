/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 16 16:12:10 GMT 2023
 */

package Model.Tests.Test;

import Model.Tests.Scaffolding.SmartSpeaker_ESTest_scaffolding;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.SmartDevice;
import Model.SmartSpeaker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartSpeaker_ESTest extends SmartSpeaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("; ", 0, "6F}b", "; ", 0);
      SmartSpeaker smartSpeaker1 = new SmartSpeaker(smartSpeaker0);
      assertEquals(0, smartSpeaker1.getVolume());
      
      smartSpeaker1.setVolume(153);
      SmartSpeaker smartSpeaker2 = new SmartSpeaker(smartSpeaker1);
      boolean boolean0 = smartSpeaker0.equals(smartSpeaker2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker(";U5F$i1iQ#Ah2HU~tR", 0, ">T )PXjg;s=%n", "\tMarca: ", 0);
      smartSpeaker0.setVolume((-1616));
      assertEquals("\tMarca: ", smartSpeaker0.getChannel());
      assertEquals(0, smartSpeaker0.getVolume());
      assertEquals(">T )PXjg;s=%n", smartSpeaker0.getMarca());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("", (-1), "", "Pq[", (-1));
      smartSpeaker0.volumeDown();
      assertEquals("", smartSpeaker0.getMarca());
      assertEquals((-1), smartSpeaker0.getVolume());
      assertEquals("Pq[", smartSpeaker0.getChannel());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("\n", 1966, "\n", "/p# 4'", 1.0);
      assertEquals(1966, smartSpeaker0.getVolume());
      
      smartSpeaker0.setVolume(705);
      smartSpeaker0.volumeUp();
      assertEquals(100, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("M@xGk>", 0, "5E", "M@xGk>", 0.0);
      int int0 = smartSpeaker0.getVolume();
      assertEquals(0, int0);
      assertEquals("M@xGk>", smartSpeaker0.getChannel());
      assertEquals("5E", smartSpeaker0.getMarca());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, (-137), (String) null, "", (-137));
      int int0 = smartSpeaker0.getVolume();
      assertEquals((-137), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("\tConsumo Base: ", 963, "\tConsumo Base: ", "Y/g)o0oQ iatrc+", (-936.49668));
      String string0 = smartSpeaker0.getMarca();
      assertEquals("Y/g)o0oQ iatrc+", smartSpeaker0.getChannel());
      assertEquals((-9018.4630284), smartSpeaker0.consumoDiario(), 0.01);
      assertEquals("\tConsumo Base: ", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker(";\n", 1, "", ";\n", 1);
      String string0 = smartSpeaker0.getMarca();
      assertEquals("", string0);
      assertEquals(0.01, smartSpeaker0.consumoDiario(), 0.01);
      assertEquals(";\n", smartSpeaker0.getChannel());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, true, (-1), (String) null, (String) null, 0.0);
      smartSpeaker0.getChannel();
      assertEquals((-1), smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("", true, 0, "", "", 0.0);
      smartSpeaker0.getChannel();
      assertEquals(0, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("M@xGk>", 0, "5E", "M@xGk>", 0.0);
      double double0 = smartSpeaker0.consumoDiario();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, smartSpeaker0.getVolume());
      assertEquals("M@xGk>", smartSpeaker0.getChannel());
      assertEquals("5E", smartSpeaker0.getMarca());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("\tConsumo Base: ", 963, "\tConsumo Base: ", "Y/g)o0oQ iatrc+", (-936.49668));
      double double0 = smartSpeaker0.consumoDiario();
      assertEquals("Y/g)o0oQ iatrc+", smartSpeaker0.getChannel());
      assertEquals("\tConsumo Base: ", smartSpeaker0.getMarca());
      assertEquals((-9018.4630284), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("\tConsumo Base: ", 963, "\tConsumo Base: ", "Y/g)o0oQ iatrc+", (-936.49668));
      smartSpeaker0.turnSpeakerOn();
      SmartSpeaker smartSpeaker1 = (SmartSpeaker)smartSpeaker0.clone();
      assertEquals((-9018.4630284), smartSpeaker0.consumoDiario(), 0.01);
      assertEquals("Y/g)o0oQ iatrc+", smartSpeaker1.getChannel());
      assertEquals("\tConsumo Base: ", smartSpeaker1.getMarca());
      assertEquals((-9018.4630284), smartSpeaker1.consumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("; ", 0, "6F}b", "; ", 0);
      SmartSpeaker smartSpeaker1 = (SmartSpeaker)smartSpeaker0.clone();
      assertEquals("6F}b", smartSpeaker1.getMarca());
      assertEquals(0, smartSpeaker1.getVolume());
      assertEquals("; ", smartSpeaker1.getChannel());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("5@X{", 1218, "1 d#dxP", "1 d#dxP", 1.0);
      SmartSpeaker smartSpeaker1 = (SmartSpeaker)smartSpeaker0.clone();
      assertEquals("1 d#dxP", smartSpeaker1.getChannel());
      assertEquals(12.18, smartSpeaker1.consumoDiario(), 0.01);
      assertEquals("1 d#dxP", smartSpeaker1.getMarca());
      assertEquals(1218, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SmartSpeaker.parseSmartSpeaker("ID: ${,;{7+y?Or8kh+-,\n\tOn: false;\n\tConsumo Base: 4.0;\n\tVolume: 4; \tMarca: ${,;{7+y?Or8kh+-,; \tCanal: ${,;{7+y?Or8kh+-,\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ID: ${\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SmartSpeaker.parseSmartSpeaker("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("Model.SmartSpeaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, true, (-1), (String) null, (String) null, 0.0);
      SmartSpeaker smartSpeaker1 = new SmartSpeaker(smartSpeaker0);
      // Undeclared exception!
      try { 
        smartSpeaker1.equals(smartSpeaker0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartDevice", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = null;
      try {
        smartSpeaker0 = new SmartSpeaker((SmartSpeaker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartDevice", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("M@xGk>", 0, "5E", "M@xGk>", 0.0);
      String string0 = smartSpeaker0.getChannel();
      assertEquals(0, smartSpeaker0.getVolume());
      assertEquals("M@xGk>", string0);
      assertEquals("5E", smartSpeaker0.getMarca());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("\tConsumo Base: ", 963, "\tConsumo Base: ", "Y/g)o0oQ iatrc+", (-936.49668));
      int int0 = smartSpeaker0.getVolume();
      assertEquals(963, int0);
      assertEquals("Y/g)o0oQ iatrc+", smartSpeaker0.getChannel());
      assertEquals("\tConsumo Base: ", smartSpeaker0.getMarca());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, true, (-1), (String) null, (String) null, 0.0);
      smartSpeaker0.getMarca();
      assertEquals((-1), smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker(";-;{2D()", 0, "Q", ";-;{2D()", 0);
      SmartSpeaker smartSpeaker1 = new SmartSpeaker(smartSpeaker0);
      assertEquals("Q", smartSpeaker1.getMarca());
      
      smartSpeaker1.setMarca("R");
      boolean boolean0 = smartSpeaker1.equals(smartSpeaker0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("<:$utHJOJ", true, (-2016), "<:$utHJOJ", "<:$utHJOJ", (-2016));
      SmartSpeaker smartSpeaker1 = new SmartSpeaker(smartSpeaker0);
      smartSpeaker0.volumeUp();
      boolean boolean0 = smartSpeaker0.equals(smartSpeaker1);
      assertEquals((-2015), smartSpeaker0.getVolume());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker(";-;{2D()", 0, "Q", ";-;{2D()", 0);
      SmartSpeaker smartSpeaker1 = new SmartSpeaker(smartSpeaker0);
      boolean boolean0 = smartSpeaker1.equals(smartSpeaker0);
      assertEquals(";-;{2D()", smartSpeaker1.getChannel());
      assertEquals("Q", smartSpeaker1.getMarca());
      assertTrue(smartSpeaker0.equals((Object)smartSpeaker1));
      assertEquals(0, smartSpeaker1.getVolume());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("c\"$%4,ZdV zv", 1941, "c\"$%4,ZdV zv", "c\"$%4,ZdV zv", 1941);
      boolean boolean0 = smartSpeaker0.equals("c\"$%4,ZdV zv");
      assertFalse(boolean0);
      assertEquals(1941, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("#`q-cP7gE", false, (-136), "#`q-cP7gE", "#`q-cP7gE", (-136));
      boolean boolean0 = smartSpeaker0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(184.96, smartSpeaker0.consumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("#`q-cP7gE", false, (-136), "#`q-cP7gE", "#`q-cP7gE", (-136));
      boolean boolean0 = smartSpeaker0.equals(smartSpeaker0);
      assertTrue(boolean0);
      assertEquals((-136), smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("\n", 1966, "\n", "/p# 4'", 1.0);
      SmartSpeaker smartSpeaker1 = new SmartSpeaker("SAcWqg;lG", 705, "/p# 4'", "ho2@X_R v{5vSgV", 1966);
      boolean boolean0 = smartSpeaker0.equals(smartSpeaker1);
      assertEquals("ho2@X_R v{5vSgV", smartSpeaker1.getChannel());
      assertEquals(705, smartSpeaker1.getVolume());
      assertFalse(boolean0);
      assertEquals("/p# 4'", smartSpeaker1.getMarca());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker(";-;{2D()", 0, "Q", ";-;{2D()", 0);
      smartSpeaker0.setVolume(0);
      assertEquals("Q", smartSpeaker0.getMarca());
      assertEquals(";-;{2D()", smartSpeaker0.getChannel());
      assertEquals(0, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("\n", 1966, "\n", "/p# 4'", 1.0);
      assertEquals(19.66, smartSpeaker0.consumoDiario(), 0.01);
      
      smartSpeaker0.setVolume(100);
      assertEquals("\n", smartSpeaker0.getMarca());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("y_*;{_C=b!.0cq}", 1026, "y_*;{_C=b!.0cq}", (String) null, 1026);
      smartSpeaker0.setVolume(2);
      assertEquals(2, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("\n", 1966, "\n", "/p# 4'", 1.0);
      smartSpeaker0.volumeDown();
      assertEquals(19.65, smartSpeaker0.consumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker(";-;{2D()", 0, "Q", ";-;{2D()", 0);
      smartSpeaker0.volumeDown();
      assertEquals("Q", smartSpeaker0.getMarca());
      assertEquals(";-;{2D()", smartSpeaker0.getChannel());
      assertEquals(0, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("\n", 1966, "\n", "/p# 4'", 1.0);
      smartSpeaker0.volumeUp();
      assertEquals("\n", smartSpeaker0.getMarca());
      assertEquals("/p# 4'", smartSpeaker0.getChannel());
      assertEquals(19.66, smartSpeaker0.consumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("8`>kMh", (-39), "PiZMq_a>A", "do^Murca:C", (-39));
      assertEquals("do^Murca:C", smartSpeaker0.getChannel());
      
      smartSpeaker0.setChannel("PiZMq_a>A");
      assertEquals((-39), smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("y_*;{_C=b!.0cq}", 1026, "y_*;{_C=b!.0cq}", (String) null, 1026);
      smartSpeaker0.turnSpeakerOff();
      assertEquals(10526.76, smartSpeaker0.consumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("${,;{7+y?Or8kh+;p-,", 4, "${,;{7+y?Or8kh+;p-,", "${,;{7+y?Or8kh+;p-,", 0.0);
      String string0 = smartSpeaker0.toString();
      assertEquals("ID: ${,;{7+y?Or8kh+;p-,\n\tOn: false;\n\tConsumo Base: 0.0;\n\tVolume: 4; \tMarca: ${,;{7+y?Or8kh+;p-,; \tCanal: ${,;{7+y?Or8kh+;p-,\n", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("8`>kMh", (-39), "PiZMq_a>A", "do^Murca:C", (-39));
      SmartDevice smartDevice0 = smartSpeaker0.clone();
      assertEquals("do^Murca:C", smartSpeaker0.getChannel());
      
      smartSpeaker0.setChannel("PiZMq_a>A");
      boolean boolean0 = smartSpeaker0.equals(smartDevice0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        SmartSpeaker.parseSmartSpeaker((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartSpeaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("8`>kMh", (-39), "PiZMq_a>A", "do^Murca:C", (-39));
      double double0 = smartSpeaker0.consumoDiario();
      assertEquals("PiZMq_a>A", smartSpeaker0.getMarca());
      assertEquals(15.21, double0, 0.01);
      assertEquals("do^Murca:C", smartSpeaker0.getChannel());
  }
}
