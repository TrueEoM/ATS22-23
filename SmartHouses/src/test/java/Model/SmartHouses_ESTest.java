/*
 * This file was automatically generated by EvoSuite
 * Wed May 10 16:49:01 GMT 2023
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.CasaInteligente;
import Model.Fatura;
import Model.Formulas.FormulaEDP;
import Model.Formulas.FormulaEnergia;
import Model.Formulas.FormulaEnergiaSimples;
import Model.Formulas.FormulaGoldEnergy;
import Model.Formulas.FormulaMuon;
import Model.Formulas.FormulaSUElectricidade;
import Model.Formulas.FormulaYIce;
import Model.Fornecedor;
import Model.Log;
import Model.SmartCamera;
import Model.SmartDevice;
import Model.SmartHouses;
import Model.SmartSpeaker;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StreamCorruptedException;
import java.time.Clock;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartHouses_ESTest extends SmartHouses_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.addRoom(";j&MA1iS8\u0003OF3!)zP", "7p U-.FD:;*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      smartHouses0.addRoom(";", ";");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      SmartHouses smartHouses0 = new SmartHouses();
      LocalDateTime localDateTime0 = smartHouses0.getDate();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "Rly+>?iZw", "");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      FormulaEDP formulaEDP0 = new FormulaEDP();
      Fornecedor fornecedor0 = new Fornecedor(37, "-T", formulaEDP0);
      hashMap1.put("xueQRNc*_zXnt|", fornecedor0);
      FormulaYIce formulaYIce0 = new FormulaYIce();
      Fornecedor fornecedor1 = new Fornecedor(1537.5299255193418, "F", formulaYIce0);
      fornecedor1.addCasa(casaInteligente0);
      hashMap1.put("PKC`(A^-7Wp<0lbU Ra", fornecedor1);
      SmartHouses smartHouses1 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      String string0 = smartHouses1.fornecedorComMaisFaturacao(localDateTime0, (LocalDateTime) null);
      assertEquals("O fornecedor com mais fatura\u00E7\u00E3o \u00E9 o F", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      SmartHouses smartHouses0 = new SmartHouses();
      LocalDateTime localDateTime0 = smartHouses0.getDate();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "-T", 37, "Rly+>?iZw", "");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      hashMap0.put("m:\"0o9*yy}cN", casaInteligente0);
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      SmartHouses smartHouses1 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      String string0 = smartHouses1.casaGastouMaisPeriodoVariosFornecedores(localDateTime0, (LocalDateTime) null);
      assertEquals("Nenhuma casa tem valor superior a 0\u20AC", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "Rly+>?iZw", "");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      hashMap0.put("m:\"0o9*yy}cN", casaInteligente0);
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      // Undeclared exception!
      try { 
        smartHouses0.alteraFornecedor("=", "(o>UgZWDZa=1*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.getLogsDevice("#3AEq;j", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      smartHouses0.colocaTon("A 215BB=", "Q##qIs<;H~F3UgFP", 3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      smartHouses0.colocaTon("", "", 2727);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      smartHouses0.colocaTon((String) null, "ZYYsXw(4_v", 2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.gestaoDevices((String) null, "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      HashMap<String, Fornecedor> hashMap0 = new HashMap<String, Fornecedor>();
      smartHouses0.setFornecedores(hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "-T", 37, "Rly+>?iZw", "");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      hashMap0.put("m:\"0o9*yy}cN", casaInteligente0);
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      smartHouses0.removePermanenteDevice("", "=");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "Rly+>?iZw", "-T");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      hashMap0.put("m:\"0o9*yy}cN", casaInteligente0);
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      smartHouses0.removeDevice((String) null, "=");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "Rly+>?iZw", "-T");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      hashMap0.put("m:\"0o9*yy}cN", casaInteligente0);
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      Log log0 = new Log();
      // Undeclared exception!
      try { 
        smartHouses0.addLogExecute("=", "oVrDPAJ|kPZM", log0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      SmartHouses smartHouses0 = new SmartHouses();
      LocalDateTime localDateTime0 = smartHouses0.getDate();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "Rly+>?iZw", "");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      FormulaYIce formulaYIce0 = new FormulaYIce();
      Fornecedor fornecedor0 = new Fornecedor(1537.5299255193418, "", formulaYIce0);
      hashMap1.put("PKC`(A^-7Wp<0lbU Ra", fornecedor0);
      SmartHouses smartHouses1 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      List<Fornecedor> list0 = smartHouses1.ordenarFornecedores(localDateTime0, (LocalDateTime) null);
      assertTrue(list0.contains(fornecedor0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      FormulaGoldEnergy formulaGoldEnergy0 = new FormulaGoldEnergy();
      Fornecedor fornecedor0 = new Fornecedor(2392.2866952043, "", formulaGoldEnergy0);
      smartHouses0.adicionaFornecedor("", fornecedor0);
      Map<String, Fornecedor> map0 = smartHouses0.getFornecedores();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      FormulaSUElectricidade formulaSUElectricidade0 = new FormulaSUElectricidade();
      Fornecedor fornecedor0 = new Fornecedor(0.0, "", formulaSUElectricidade0);
      smartHouses0.adicionaFornecedor("", fornecedor0);
      Fornecedor fornecedor1 = smartHouses0.getFornecedor("");
      assertEquals(0.0, fornecedor1.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      FormulaSUElectricidade formulaSUElectricidade0 = new FormulaSUElectricidade();
      Fornecedor fornecedor0 = new Fornecedor((-801.0), "", formulaSUElectricidade0);
      smartHouses0.adicionaFornecedor("", fornecedor0);
      Fornecedor fornecedor1 = smartHouses0.getFornecedor("");
      assertEquals((-801.0), fornecedor1.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("U ]z", "-T", 37, "-T", "-T");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      hashMap0.put("m:\"0o9*yy}LN", casaInteligente0);
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      Map<String, Fatura> map1 = smartHouses0.getFaturas("U ]z");
      assertTrue(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, 3, "gF;>>M:S(LMz", "Rly+>?iZw", 147.60136996513);
      smartHouses0.adicionaDevice("lJcn?ChU$I4U}Nm", smartSpeaker0);
      Map<String, SmartDevice> map0 = smartHouses0.getDispositivos();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "Rly+>?iZw", "");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      LocalDateTime localDateTime0 = smartHouses0.getDate();
      assertNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "Rly+>?iZw", "");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      hashMap0.put("m:\"0o9*yy}cN", casaInteligente0);
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      Map<String, CasaInteligente> map1 = smartHouses0.getCasas();
      assertEquals(1, map1.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      Fornecedor fornecedor0 = new Fornecedor("DZ)20K)7\"RERtTj5f", 2475.5781261404);
      smartHouses0.adicionaFornecedor("DZ)20K)7\"RERtTj5f", fornecedor0);
      boolean boolean0 = smartHouses0.existsHomeInFornecedor("DZ)20K)7\"RERtTj5f", "DZ)20K)7\"RERtTj5f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "=", "");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      hashMap0.put("m:\"0o9*yy}cN", casaInteligente0);
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      boolean boolean0 = smartHouses0.existeDeviceInHome("m:\"0o9*yy}cN", "=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      SmartCamera smartCamera0 = new SmartCamera("*yRv[KLm*I @oeI2", "*yRv[KLm*I @oeI2", 806.3243, 806.3243);
      smartHouses0.adicionaDevice("*yRv[KLm*I @oeI2", smartCamera0);
      String string0 = smartHouses0.dispositovosTostring();
      assertEquals("*ID DEVICE -> *yRv[KLm*I @oeI2 * \n - INFO -> ID: *yRv[KLm*I @oeI2\n\tOn: false;\n\tConsumo Base: 806.3243;\n\tTamanho: 806.3243Mb ; \tResolu\u00E7\u00E3o: *yRv[KLm*I @oeI2;\n\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "Rly+>?iZw", "");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      hashMap0.put("m:\"0o9*yy}cN", casaInteligente0);
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      String string0 = smartHouses0.casasTostring();
      assertEquals("* ID HOUSE -> = * \n - INFO -> \nID Home: =\nMorada: Rly+>?iZw\nFornecedor: \nProprietario: U ;z\nNIF: 37\n----------------------Divis\u00E3o/Dispositivos----------------------\n----------------------------------------------------------------\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      HashMap<String, Fornecedor> hashMap0 = new HashMap<String, Fornecedor>();
      FormulaYIce formulaYIce0 = new FormulaYIce();
      Fornecedor fornecedor0 = new Fornecedor(1537.5299255193418, "m:\"0o9*yy}cN", formulaYIce0);
      hashMap0.put("m:\"0o9*yy}cN", fornecedor0);
      hashMap0.put("\"L;+", fornecedor0);
      // Undeclared exception!
      try { 
        smartHouses0.setFornecedores(hashMap0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Duplicate key Id: m:\"0o9*yy}cN; Imposto: 1537.5299255193418;
         //
         verifyException("java.util.stream.Collectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.setFornecedor((Map<String, Fornecedor>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.setDispositivos((Map<String, SmartDevice>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.setCasas((Map<String, CasaInteligente>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.setAlldivision("Model.SmartDevice", "b(!:", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.parser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.lerFicheiro((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /*@Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("estado.obj");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SmartHouses smartHouses0 = new SmartHouses();
      try { 
        smartHouses0.guardarEstado();
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }*/

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      SmartHouses smartHouses0 = new SmartHouses();
      LocalDateTime localDateTime0 = smartHouses0.getDate();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "-T", 37, "Rly+>?iZw", "");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      FormulaYIce formulaYIce0 = new FormulaYIce();
      Fornecedor fornecedor0 = new Fornecedor(1537.5299255193418, "F", formulaYIce0);
      fornecedor0.addCasa(casaInteligente0);
      hashMap1.put("PKC`(A^-7Wp<0lbU Ra", fornecedor0);
      SmartHouses smartHouses1 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      smartHouses1.changeFormula("F", "");
      // Undeclared exception!
      try { 
        smartHouses1.fornecedorComMaisFaturacao(localDateTime0, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.carregarEstado((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /*@Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*yRv[KLm*I @oeI2");
      byte[] byteArray0 = new byte[12];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        smartHouses0.carregarEstado("*yRv[KLm*I @oeI2");
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(StreamCorruptedException e) {
         //
         // invalid stream header: 00000000
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }*/

  /*@Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*yRv[KLm*I @oeI2");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        smartHouses0.carregarEstado("*yRv[KLm*I @oeI2");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }*/

  /*@Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("*yRv[KLm*I @oeI2");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        smartHouses0.carregarEstado("*yRv[KLm*I @oeI2");
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }*/

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.adicionaFornecedor("U:;z", (Fornecedor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.adicionaDevice("/s{wm", (SmartDevice) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        smartHouses0.addLogChangeMode("Model.Formulas.FormulaYIce", (LocalDateTime) null, boolean0, " -dvwMIx}E{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        smartHouses0.addLogChangeMode((String) null, localDateTime0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.addFornecedor((Fornecedor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.addDeviceToRoomSameHouse("PKC(/A-7W<0lbU Ra", "MyM", "ZYzS[d)A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("U ]z", "-T", 37, "-T", "-T");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      hashMap0.put("m:\"0o9*yy}LN", casaInteligente0);
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("PKC(/A-7W<0lbU Ra", true, 37, "-T", "U ]z", 1.0);
      try { 
        smartHouses0.addDeviceToRoom("U ]z", "a(O5pL[p", smartSpeaker0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A divisao a(O5pL[p n\u00E3o existe
         //
         verifyException("Model.CasaInteligente", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      SmartHouses smartHouses0 = null;
      try {
        smartHouses0 = new SmartHouses(hashMap0, (Map<String, SmartDevice>) null, (Map<String, Fornecedor>) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "Rly+>?iZw", "");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      FormulaMuon formulaMuon0 = new FormulaMuon();
      Fornecedor fornecedor0 = new Fornecedor(37, "", formulaMuon0);
      hashMap1.put("U ;z", fornecedor0);
      hashMap1.put("PKC`(A^-7Wp<0lbU Ra", fornecedor0);
      SmartHouses smartHouses0 = null;
      try {
        smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Duplicate key Id: ; Imposto: 37.0;
         //
         verifyException("java.util.stream.Collectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SmartHouses smartHouses0 = null;
      try {
        smartHouses0 = new SmartHouses((SmartHouses) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "Rly+>?iZw", "");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      FormulaYIce formulaYIce0 = new FormulaYIce();
      Fornecedor fornecedor0 = new Fornecedor(1537.5299255193418, "", formulaYIce0);
      hashMap1.put("PKC`(A^-7Wp<0lbU Ra", fornecedor0);
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      smartHouses0.adicionaFornecedor("N_L5~Vz)?$lFbHJq:", fornecedor0);
      SmartHouses smartHouses1 = null;
      try {
        smartHouses1 = new SmartHouses(smartHouses0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Duplicate key Id: ; Imposto: 1537.5299255193418;
         //
         verifyException("java.util.stream.Collectors", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      Fornecedor fornecedor0 = new Fornecedor("DZ)20K)7\"RERtTj5f", 2475.5781261404);
      smartHouses0.adicionaFornecedor("DZ)20K)7\"RERtTj5f", fornecedor0);
      boolean boolean0 = smartHouses0.containsFornecedor("DZ)20K)7\"RERtTj5f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      boolean boolean0 = smartHouses0.containsFornecedor("-T");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      try { 
        smartHouses0.lerFicheiro("jZqP0!");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // Ficheiro n\u00E3o encontrado
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.setFornecedores((Map<String, Fornecedor>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      FormulaEnergiaSimples formulaEnergiaSimples0 = new FormulaEnergiaSimples();
      Fornecedor fornecedor0 = new Fornecedor((-5162.597859374094), "rcI7*", formulaEnergiaSimples0);
      Map<String, CasaInteligente> map0 = fornecedor0.getAllCasas();
      smartHouses0.setCasas(map0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      Map<String, SmartDevice> map0 = smartHouses0.getDispositivos();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      HashMap<String, SmartDevice> hashMap0 = new HashMap<String, SmartDevice>();
      smartHouses0.setDispositivos(hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      smartHouses0.addRoom("x dOH(Z8oC.^", "PKC(/A-7W<0lbU Ra");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      SmartHouses smartHouses0 = new SmartHouses();
      LocalDateTime localDateTime0 = smartHouses0.getDate();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "Rly+>?iZw", "");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      FormulaYIce formulaYIce0 = new FormulaYIce();
      Fornecedor fornecedor0 = new Fornecedor(1537.5299255193418, "F", formulaYIce0);
      hashMap1.put("PKC`(A^-7Wp<0lbU Ra", fornecedor0);
      SmartHouses smartHouses1 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      String string0 = smartHouses1.fornecedorComMaisFaturacao(localDateTime0, (LocalDateTime) null);
      assertEquals("O fornecedor com mais fatura\u00E7\u00E3o \u00E9 o N\u00E3o h\u00E1 faturas registadas.", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      Fornecedor fornecedor0 = new Fornecedor("DZ)20K)7\"RERtTj5f", 2475.5781261404);
      smartHouses0.adicionaFornecedor("DZ)20K)7\"RERtTj5f", fornecedor0);
      try { 
        smartHouses0.removeFornecedor("DZ)20K)7\"RERtTj5f");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O Model.Fornecedor com id DZ)20K)7\"RERtTj5f n\u00E3o existe
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      smartHouses0.removeFornecedor("\"Fs%gah/kr{=78T1@q*");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "Rly+>?iZw", "");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      FormulaYIce formulaYIce0 = new FormulaYIce();
      Fornecedor fornecedor0 = new Fornecedor(1537.5299255193418, "", formulaYIce0);
      hashMap1.put("PKC`(A^-7Wp<0lbU Ra", fornecedor0);
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      try { 
        smartHouses0.addFornecedor(fornecedor0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O Model.Fornecedor com id  j\u00E1 existe
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      try { 
        smartHouses0.getFornecedor("DF[A@~yvN.zR");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O Model.Fornecedor com id DF[A@~yvN.zR n\u00E3o existe
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      FormulaSUElectricidade formulaSUElectricidade0 = new FormulaSUElectricidade();
      Fornecedor fornecedor0 = new Fornecedor(1.0904781761313316, "R", formulaSUElectricidade0);
      smartHouses0.adicionaFornecedor("R", fornecedor0);
      Fornecedor fornecedor1 = smartHouses0.getFornecedor("R");
      assertEquals(1.0904781761313316, fornecedor1.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "Rly+>?iZw", "");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      hashMap0.put("m:\"0o9*yy}cN", casaInteligente0);
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      FormulaYIce formulaYIce0 = new FormulaYIce();
      Fornecedor fornecedor0 = new Fornecedor(1537.5299255193418, "", formulaYIce0);
      hashMap1.put("m:\"0o9*yy}cN", fornecedor0);
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      // Undeclared exception!
      try { 
        smartHouses0.atualiza((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "Rly+>?iZw", "-T");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      hashMap0.put("m:\"0o9*yy}cN", casaInteligente0);
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      smartHouses0.atualiza((LocalDateTime) null);
  }

  /*@Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      smartHouses0.parser("Rly+>?iZw");
  }*/

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      try { 
        smartHouses0.removeHome("/|{'XZd[B2/(,{-)", "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O fornecedor /|{'XZd[B2/(,{-) n\u00E3o existe.
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("Coopernico", (-3498.555068781));
      SmartHouses smartHouses0 = new SmartHouses();
      smartHouses0.addFornecedor(fornecedor0);
      try { 
        smartHouses0.removeHome("Coopernico", "njw#~$JyC_[GSi8");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // O fornecedor Coopernico n\u00E3o tem a casa njw#~$JyC_[GSi8
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      boolean boolean0 = smartHouses0.existeDeviceHomes("=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("U ]z", "-T", 37, "-T", "-T");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      hashMap0.put("m:\"0o9*yy}LN", casaInteligente0);
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      boolean boolean0 = smartHouses0.existsHome("U ]z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      boolean boolean0 = smartHouses0.existsHome("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      smartHouses0.colocaVol("\"Fs%gah/kr{=78T1@q*", (String) null, 1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      smartHouses0.colocaTon("", "L", 1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "Rly+>?iZw", "-T");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      hashMap0.put("m:\"0o9*yy}cN", casaInteligente0);
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      try { 
        smartHouses0.addDeviceToRoomSameHouse("PKC(/A-7W<0lbU Ra", "=", "ZYS[d)A");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A localiza\u00E7\u00E3o n\u00E3o existe
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      SmartCamera smartCamera0 = new SmartCamera("*yRv[KLm/*I @#oeI2", "*yRv[KLm/*I @#oeI2", 806.3243, 806.3243);
      smartHouses0.adicionaDevice("*yRv[KLm/*I @#oeI2", smartCamera0);
      try { 
        smartHouses0.adicionaDevice("*yRv[KLm/*I @#oeI2", smartCamera0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Device com esse id j\u00E1 existe
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      boolean boolean0 = smartHouses0.existsFornecedor((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      SmartCamera smartCamera0 = new SmartCamera("*yRv[KLm*I @oeI2", "*yRv[KLm*I @oeI2", 806.3243, 806.3243);
      smartHouses0.adicionaDevice("*yRv[KLm*I @oeI2", smartCamera0);
      boolean boolean0 = smartHouses0.existsDevice("*yRv[KLm*I @oeI2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      boolean boolean0 = smartHouses0.existsDevice("DZ)20K)7\"RERtTj5f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.existeDeviceInHome("", "Fornecedor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      HashMap<String, FormulaEnergia> hashMap0 = new HashMap<String, FormulaEnergia>();
      smartHouses0.setFormulas(hashMap0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.setAllDevicesHome("+", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      Map<String, FormulaEnergia> map0 = smartHouses0.getFormulas();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      SmartHouses smartHouses1 = smartHouses0.clone();
      assertFalse(smartHouses1.equals((Object)smartHouses0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      String string0 = smartHouses0.dispositovosTostring();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      SmartHouses smartHouses1 = new SmartHouses(smartHouses0);
      assertFalse(smartHouses1.equals((Object)smartHouses0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.getFaturas("ls=?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      CasaInteligente casaInteligente0 = new CasaInteligente((String) null, (String) null, 4905, (String) null, "N\u00E3o existem logs no device ");
      // Undeclared exception!
      try { 
        smartHouses0.adicionaHome((String) null, casaInteligente0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      FormulaGoldEnergy formulaGoldEnergy0 = new FormulaGoldEnergy();
      Fornecedor fornecedor0 = new Fornecedor(2392.2866952043, "", formulaGoldEnergy0);
      smartHouses0.adicionaFornecedor("", fornecedor0);
      boolean boolean0 = smartHouses0.existsFornecedor("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      LocalDateTime localDateTime0 = smartHouses0.getDate();
      List<Fornecedor> list0 = smartHouses0.ordenarFornecedores(localDateTime0, (LocalDateTime) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      Map<String, Fornecedor> map0 = smartHouses0.getFornecedores();
      smartHouses0.setFornecedor(map0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      try { 
        smartHouses0.guardarEstado();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.changeFormula("", "J[LqOq'sLMQ}z9B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      smartHouses0.setDate((LocalDateTime) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      try { 
        smartHouses0.carregarEstado("C3?");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.removePermanenteDevice("", "F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.removeDevice((String) null, "=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("=", "U ;z", 37, "Rly+>?iZw", "");
      Map<String, SmartDevice> map0 = casaInteligente0.getDevices();
      HashMap<String, Fornecedor> hashMap1 = new HashMap<String, Fornecedor>();
      SmartHouses smartHouses0 = new SmartHouses(hashMap0, map0, hashMap1, (LocalDateTime) null);
      Map<String, CasaInteligente> map1 = smartHouses0.getCasas();
      assertEquals(0, map1.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      // Undeclared exception!
      try { 
        smartHouses0.existsHomeInFornecedor("-T", "U ;z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("PKC(/A-7W<0lbU Ra", true, 37, "-T", "U ]z", 1.0);
      // Undeclared exception!
      try { 
        smartHouses0.addDeviceToRoom("U ]z", "a(O5pL[p", smartSpeaker0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartHouses", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SmartHouses smartHouses0 = new SmartHouses();
      String string0 = smartHouses0.casasTostring();
      assertEquals("", string0);
  }
}
