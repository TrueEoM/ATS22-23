/*
 * This file was automatically generated by EvoSuite
 * Wed May 10 16:49:52 GMT 2023
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Fatura;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fatura_ESTest extends Fatura_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-446.52532424547627), "", localDateTime0, localDateTime0, "", (-867), "", (-446.52532424547627));
      Fatura fatura1 = new Fatura((-867), "", localDateTime0, localDateTime0, "", (-867), "", (-446.52532424547627));
      boolean boolean0 = fatura1.equals(fatura0);
      assertFalse(boolean0);
      assertEquals((-867.0), fatura1.getConsumo(), 0.01);
      assertEquals((-867), fatura1.getNIF());
      assertFalse(fatura0.equals((Object)fatura1));
      assertEquals((-446.52532424547627), fatura1.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-447.8800785), "t", localDateTime0, localDateTime0, "t", 556, "t", 556);
      Fatura fatura1 = new Fatura(556, "t", localDateTime0, localDateTime0, "t", 556, "t", 556);
      fatura1.setNIF((-57));
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals((-57), fatura1.getNIF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-447.8), "", localDateTime0, localDateTime0, "", (-867), "", (-1.0));
      Fatura fatura1 = new Fatura(fatura0);
      fatura0.setValor(1);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(1.0, fatura0.getValor(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      double double0 = fatura0.getValor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-447.8), "", localDateTime0, localDateTime0, "", (-867), "", (-1.0));
      assertEquals((-1.0), fatura0.getValor(), 0.01);
      
      fatura0.setValor(1);
      double double0 = fatura0.getValor();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(1, 1);
      LocalDateTime localDateTime0 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      Fatura fatura0 = new Fatura(3755.262784868206, (String) null, localDateTime0, localDateTime0, (String) null, 1, (String) null, (-1.0));
      int int0 = fatura0.getNIF();
      assertEquals((-1.0), fatura0.getValor(), 0.01);
      assertEquals(3755.262784868206, fatura0.getConsumo(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura(134.53539867348, "", localDateTime0, localDateTime0, "", 1, "", 134.53539867348);
      assertEquals(1, fatura0.getNIF());
      
      fatura0.setNIF((-1));
      int int0 = fatura0.getNIF();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura(1.0, "j/$|n1qm,.", localDateTime0, localDateTime0, (String) null, 1, "", 2875.1843644115343);
      String string0 = fatura0.getMorada();
      assertNull(string0);
      assertEquals(2875.1843644115343, fatura0.getValor(), 0.01);
      assertEquals(1, fatura0.getNIF());
      assertEquals("j/$|n1qm,.", fatura0.getIdFatura());
      assertEquals(1.0, fatura0.getConsumo(), 0.01);
      assertEquals("", fatura0.getIdFornecedor());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.getMorada();
      assertEquals(0, fatura0.getNIF());
      assertEquals(0.0, fatura0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setIdFornecedor((String) null);
      fatura0.getIdFornecedor();
      assertEquals(0.0, fatura0.getValor(), 0.01);
      assertEquals(0, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setIdFornecedor("yyyy-MM-dd HH:mm");
      fatura0.getIdFornecedor();
      assertEquals(0, fatura0.getNIF());
      assertEquals(0.0, fatura0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setIdFatura((String) null);
      fatura0.getIdFatura();
      assertEquals(0.0, fatura0.getValor(), 0.01);
      assertEquals(0, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fatura fatura0 = new Fatura(476.1310861796584, "$9Oe8wdb", (LocalDateTime) null, (LocalDateTime) null, "$9Oe8wdb", (-3189), "$9Oe8wdb", 476.1310861796584);
      fatura0.getIdFatura();
      assertEquals((-3189), fatura0.getNIF());
      assertEquals(476.1310861796584, fatura0.getValor(), 0.01);
      assertEquals(476.1310861796584, fatura0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-648.6593964), "PL2WX*7b", localDateTime0, localDateTime0, "", 705, "PL2WX*7b", 1.0);
      fatura0.getFim();
      assertEquals(705, fatura0.getNIF());
      assertEquals("", fatura0.getMorada());
      assertEquals(1.0, fatura0.getValor(), 0.01);
      assertEquals("PL2WX*7b", fatura0.getIdFatura());
      assertEquals("PL2WX*7b", fatura0.getIdFornecedor());
      assertEquals((-648.6593964), fatura0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      double double0 = fatura0.getConsumo();
      assertEquals(0, fatura0.getNIF());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, fatura0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setConsumo(1.0);
      double double0 = fatura0.getConsumo();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-447.8800785), "t", localDateTime0, localDateTime0, "t", 556, "t", 556);
      Fatura fatura1 = fatura0.clone();
      assertEquals((-447.8800785), fatura0.getConsumo(), 0.01);
      assertTrue(fatura1.equals((Object)fatura0));
      assertEquals(556, fatura1.getNIF());
      assertEquals(556.0, fatura0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-447.8), "", localDateTime0, localDateTime0, "", (-867), "", (-1.0));
      fatura0.setNIF(1);
      fatura0.clone();
      assertEquals(1, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setConsumo(1.0);
      fatura0.clone();
      assertEquals(1.0, fatura0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fatura fatura0 = new Fatura((-2481.56), "oaP-WC0", (LocalDateTime) null, (LocalDateTime) null, "/}-`", (-335), "/}-`", (-2481.56));
      Fatura fatura1 = fatura0.clone();
      assertEquals("/}-`", fatura1.getIdFornecedor());
      assertEquals((-335), fatura1.getNIF());
      assertEquals((-2481.56), fatura0.getConsumo(), 0.01);
      assertEquals((-335), fatura0.getNIF());
      assertEquals((-2481.56), fatura1.getConsumo(), 0.01);
      assertEquals((-2481.56), fatura1.getValor(), 0.01);
      assertEquals((-2481.56), fatura0.getValor(), 0.01);
      assertEquals("oaP-WC0", fatura1.getIdFatura());
      assertEquals("/}-`", fatura1.getMorada());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      // Undeclared exception!
      try { 
        fatura0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fatura fatura0 = null;
      try {
        fatura0 = new Fatura((Fatura) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      int int0 = fatura0.getNIF();
      assertEquals(0.0, fatura0.getValor(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fatura fatura0 = new Fatura((-2481.56), "oaP-WC0", (LocalDateTime) null, (LocalDateTime) null, "/}-`", (-335), "/}-`", (-2481.56));
      String string0 = fatura0.getMorada();
      assertEquals((-2481.56), fatura0.getConsumo(), 0.01);
      assertEquals((-335), fatura0.getNIF());
      assertEquals("oaP-WC0", fatura0.getIdFatura());
      assertEquals((-2481.56), fatura0.getValor(), 0.01);
      assertEquals("/}-`", string0);
      assertEquals("/}-`", fatura0.getIdFornecedor());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fatura fatura0 = new Fatura((-2481.56), "oaP-WC0", (LocalDateTime) null, (LocalDateTime) null, "/}-`", (-335), "/}-`", (-2481.56));
      double double0 = fatura0.getValor();
      assertEquals("oaP-WC0", fatura0.getIdFatura());
      assertEquals("/}-`", fatura0.getMorada());
      assertEquals((-335), fatura0.getNIF());
      assertEquals((-2481.56), fatura0.getConsumo(), 0.01);
      assertEquals((-2481.56), double0, 0.01);
      assertEquals("/}-`", fatura0.getIdFornecedor());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.getFim();
      assertEquals(0, fatura0.getNIF());
      assertEquals(0.0, fatura0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.getIdFornecedor();
      assertEquals(0.0, fatura0.getValor(), 0.01);
      assertEquals(0, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-447.8), "", localDateTime0, localDateTime0, "", (-867), "", (-1.0));
      double double0 = fatura0.getConsumo();
      assertEquals((-447.8), double0, 0.01);
      assertEquals((-867), fatura0.getNIF());
      assertEquals((-1.0), fatura0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-447.8), "", localDateTime0, localDateTime0, "", (-867), "", (-1.0));
      fatura0.getIdFatura();
      assertEquals((-1.0), fatura0.getValor(), 0.01);
      assertEquals((-447.8), fatura0.getConsumo(), 0.01);
      assertEquals((-867), fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.getInicio();
      assertEquals(0.0, fatura0.getValor(), 0.01);
      assertEquals(0, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-0.18527235765494002), "G", localDateTime0, localDateTime0, "G", 2146074636, "G", (-0.18527235765494002));
      Fatura fatura1 = new Fatura(fatura0);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(2146074636, fatura1.getNIF());
      assertEquals((-0.18527235765494002), fatura0.getValor(), 0.01);
      assertEquals((-0.18527235765494002), fatura1.getConsumo(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-447.8800785), "t", localDateTime0, localDateTime0, "t", 567, "t", 567);
      Fatura fatura1 = new Fatura(567, "t", localDateTime0, localDateTime0, "t", 567, "t", 567);
      fatura0.setNIF((-57));
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals((-57), fatura0.getNIF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-448.07730763406306), "V", localDateTime0, localDateTime0, "V", (-113892897), "V", (-448.07730763406306));
      Fatura fatura1 = new Fatura(fatura0);
      assertTrue(fatura1.equals((Object)fatura0));
      
      fatura0.setMorada("W");
      boolean boolean0 = fatura1.equals(fatura0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-399.33956525266285), "(-\"_V2G=kM@.3", localDateTime0, localDateTime0, "(-\"_V2G=kM@.3", (-882), "(-\"_V2G=kM@.3", (-882));
      Fatura fatura1 = new Fatura((-882), "(-\"_V2G=kM@.3", localDateTime0, localDateTime0, "(-\"_V2G=kM@.3", (-882), "(-\"_V2G=kM@.3", (-399.33956525266285));
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals((-882), fatura1.getNIF());
      assertFalse(boolean0);
      assertEquals((-399.33956525266285), fatura1.getValor(), 0.01);
      assertEquals((-882.0), fatura1.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      fatura0.setFim(localDateTime0);
      fatura0.setInicio(localDateTime0);
      fatura1.setFim(localDateTime0);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(0, fatura1.getNIF());
      assertEquals(0.0, fatura1.getValor(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      fatura0.setFim(localDateTime0);
      boolean boolean0 = fatura0.equals(fatura1);
      assertFalse(boolean0);
      assertEquals(0.0, fatura1.getValor(), 0.01);
      assertEquals(0, fatura1.getNIF());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-447.8800785), "t", localDateTime0, localDateTime0, "t", 567, "t", 567);
      Fatura fatura1 = new Fatura((-447.8800785), "t", localDateTime0, localDateTime0, "t", 567, "u", (-57));
      boolean boolean0 = fatura0.equals(fatura1);
      assertFalse(boolean0);
      assertEquals((-447.8800785), fatura1.getConsumo(), 0.01);
      assertEquals("u", fatura1.getIdFornecedor());
      assertEquals(567, fatura1.getNIF());
      assertEquals((-57.0), fatura1.getValor(), 0.01);
      assertEquals("t", fatura1.getMorada());
      assertEquals("t", fatura1.getIdFatura());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-448.07730763406306), "V", localDateTime0, localDateTime0, "V", (-113892897), "V", (-448.07730763406306));
      Fatura fatura1 = new Fatura((-448.07730763406306), "W", localDateTime0, localDateTime0, "IdFatura: V\nIdFornecedor: V\nNIF: -113892897\nConsumo: -448.08\nValor: -448.08\nInicio: 2014-02-14 20:21\nFim: 2014-02-14 20:21;", (-113892897), "IdFatura: V\nIdFornecedor: V\nNIF: -113892897\nConsumo: -448.08\nValor: -448.08\nInicio: 2014-02-14 20:21\nFim: 2014-02-14 20:21;", (-448.07730763406306));
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals((-448.07730763406306), fatura1.getValor(), 0.01);
      assertEquals("W", fatura1.getIdFatura());
      assertEquals((-113892897), fatura1.getNIF());
      assertEquals((-448.07730763406306), fatura1.getConsumo(), 0.01);
      assertEquals("IdFatura: V\nIdFornecedor: V\nNIF: -113892897\nConsumo: -448.08\nValor: -448.08\nInicio: 2014-02-14 20:21\nFim: 2014-02-14 20:21;", fatura1.getMorada());
      assertEquals("IdFatura: V\nIdFornecedor: V\nNIF: -113892897\nConsumo: -448.08\nValor: -448.08\nInicio: 2014-02-14 20:21\nFim: 2014-02-14 20:21;", fatura1.getIdFornecedor());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-399.33956525266285), "(-\"_V2G=kM@.3", localDateTime0, localDateTime0, "(-\"_V2G=kM@.3", (-882), "(-\"_V2G=kM@.3", (-882));
      boolean boolean0 = fatura0.equals("(-\"_V2G=kM@.3");
      assertEquals((-399.33956525266285), fatura0.getConsumo(), 0.01);
      assertFalse(boolean0);
      assertEquals((-882.0), fatura0.getValor(), 0.01);
      assertEquals((-882), fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-0.18527235765494002), "G", localDateTime0, localDateTime0, "G", 2146074636, "G", (-0.18527235765494002));
      boolean boolean0 = fatura0.equals((Object) null);
      assertEquals(2146074636, fatura0.getNIF());
      assertEquals((-0.18527235765494002), fatura0.getValor(), 0.01);
      assertEquals((-0.18527235765494002), fatura0.getConsumo(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-447.8800785), "t", localDateTime0, localDateTime0, "t", 567, "t", 567);
      Fatura fatura1 = new Fatura(567, "t", localDateTime0, localDateTime0, "t", 567, "t", 567);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(567.0, fatura0.getValor(), 0.01);
      assertFalse(fatura0.equals((Object)fatura1));
      assertEquals(567, fatura1.getNIF());
      assertFalse(boolean0);
      assertEquals(567.0, fatura1.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-448.07730763406306), "V", localDateTime0, localDateTime0, "V", (-113892897), "V", (-448.07730763406306));
      String string0 = fatura0.toString();
      assertEquals("IdFatura: V\nIdFornecedor: V\nNIF: -113892897\nConsumo: -448.08\nValor: -448.08\nInicio: 2014-02-14 20:21\nFim: 2014-02-14 20:21;", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      fatura0.setInicio(localDateTime0);
      fatura0.getInicio();
      assertEquals(0, fatura0.getNIF());
      assertEquals(0.0, fatura0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-0.18527235765494002), "G", localDateTime0, localDateTime0, "G", 2146074636, "G", (-0.18527235765494002));
      boolean boolean0 = fatura0.equals(fatura0);
      assertEquals((-0.18527235765494002), fatura0.getValor(), 0.01);
      assertEquals((-0.18527235765494002), fatura0.getConsumo(), 0.01);
      assertEquals(2146074636, fatura0.getNIF());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = fatura0.clone();
      assertEquals(0.0, fatura0.getConsumo(), 0.01);
      assertEquals(0.0, fatura0.getValor(), 0.01);
      assertEquals(0, fatura1.getNIF());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      // Undeclared exception!
      try { 
        fatura0.equals(fatura1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Fatura", e);
      }
  }
}
