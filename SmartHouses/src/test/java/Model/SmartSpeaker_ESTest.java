/*
 * This file was automatically generated by EvoSuite
 * Wed May 10 16:49:37 GMT 2023
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.SmartDevice;
import Model.SmartSpeaker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SmartSpeaker_ESTest extends SmartSpeaker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("{", 28, "{", "z", 28);
      SmartSpeaker smartSpeaker1 = new SmartSpeaker(smartSpeaker0);
      smartSpeaker1.volumeDown();
      boolean boolean0 = smartSpeaker0.equals(smartSpeaker1);
      assertEquals(27, smartSpeaker1.getVolume());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker(",HrGV:LkQ<fi'o14", true, (-1983), ",HrGV:LkQ<fi'o14", ",HrGV:LkQ<fi'o14", (-193.871598853106));
      smartSpeaker0.setVolume(0);
      assertEquals(-0.0, smartSpeaker0.consumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("", 3839, "", "ID: ", (-2305.5));
      assertEquals(3839, smartSpeaker0.getVolume());
      
      smartSpeaker0.setVolume(3839);
      assertEquals(100, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, true, (-1), (String) null, "|yR`iL\u0005OBK", 2742.488);
      smartSpeaker0.volumeUp();
      smartSpeaker0.volumeDown();
      assertEquals(0.0, smartSpeaker0.consumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, 2582, (String) null, "", 2582);
      smartSpeaker0.volumeUp();
      assertEquals(66667.24, smartSpeaker0.consumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("D.VHBv}J<Qq", 0, "D.VHBv}J<Qq", "D.VHBv}J<Qq", 3822.8711);
      int int0 = smartSpeaker0.getVolume();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("nM9_^6ofN?", (-1), "\tConsumo Base: ", "\tConsumo Base: ", (-1));
      int int0 = smartSpeaker0.getVolume();
      assertEquals("\tConsumo Base: ", smartSpeaker0.getMarca());
      assertEquals("\tConsumo Base: ", smartSpeaker0.getChannel());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, true, (-1), (String) null, "|yR`iL\u0005OBK", 2742.488);
      String string0 = smartSpeaker0.getMarca();
      assertNull(string0);
      assertEquals((-1), smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("", 0, "", "S", 0);
      String string0 = smartSpeaker0.getMarca();
      assertEquals("", string0);
      assertEquals(0, smartSpeaker0.getVolume());
      assertEquals("S", smartSpeaker0.getChannel());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("]Q\"", 0, (String) null, (String) null, 0);
      String string0 = smartSpeaker0.getChannel();
      assertNull(string0);
      assertEquals(0, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("\tCanal: ", true, 0, "\tCanal: ", "", 0);
      String string0 = smartSpeaker0.getChannel();
      assertEquals(0, smartSpeaker0.getVolume());
      assertEquals("\tCanal: ", smartSpeaker0.getMarca());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("", 0, "", "S", 0);
      double double0 = smartSpeaker0.consumoDiario();
      assertEquals("", smartSpeaker0.getMarca());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, smartSpeaker0.getVolume());
      assertEquals("S", smartSpeaker0.getChannel());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("-2W", true, (-2109), (String) null, (String) null, 1.0);
      double double0 = smartSpeaker0.consumoDiario();
      assertEquals((-21.09), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("\tMarca: ", 3404, "\tMarca: ", "\tMarca: ", 0.0);
      SmartSpeaker smartSpeaker1 = (SmartSpeaker)smartSpeaker0.clone();
      assertEquals(3404, smartSpeaker0.getVolume());
      assertEquals(3404, smartSpeaker1.getVolume());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, true, (-1), (String) null, "|yR`iL\u0005OBK", 2742.488);
      SmartSpeaker smartSpeaker1 = (SmartSpeaker)smartSpeaker0.clone();
      assertEquals((-27.424879999999998), smartSpeaker0.consumoDiario(), 0.01);
      assertEquals((-1), smartSpeaker1.getVolume());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SmartSpeaker.parseSmartSpeaker((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartSpeaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SmartSpeaker.parseSmartSpeaker("\tOn: ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("Model.SmartSpeaker", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker((String) null, 0, "C6", "", 0.0);
      SmartSpeaker smartSpeaker1 = new SmartSpeaker(smartSpeaker0);
      // Undeclared exception!
      try { 
        smartSpeaker0.equals(smartSpeaker1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartDevice", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = null;
      try {
        smartSpeaker0 = new SmartSpeaker((SmartSpeaker) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.SmartDevice", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker(",HrGV:LkQ<fi'o14", true, (-1983), ",HrGV:LkQ<fi'o14", ",HrGV:LkQ<fi'o14", (-193.871598853106));
      smartSpeaker0.getChannel();
      assertEquals((-1983), smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("\tVolume: ", 3660, "\tVolume: ", "\tVolume: ", 0.0);
      int int0 = smartSpeaker0.getVolume();
      assertEquals(3660, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker(",HrGV:LkQ<fi'o14", true, (-1983), ",HrGV:LkQ<fi'o14", ",HrGV:LkQ<fi'o14", (-193.871598853106));
      smartSpeaker0.getMarca();
      assertEquals((-1983), smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("{", 277, "{", "z", 277);
      SmartSpeaker smartSpeaker1 = new SmartSpeaker(smartSpeaker0);
      assertEquals("{", smartSpeaker1.getMarca());
      
      smartSpeaker1.setMarca("z");
      boolean boolean0 = smartSpeaker0.equals(smartSpeaker1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("{", 43, "{", "z", 43);
      SmartSpeaker smartSpeaker1 = new SmartSpeaker(smartSpeaker0);
      smartSpeaker0.volumeDown();
      boolean boolean0 = smartSpeaker0.equals(smartSpeaker1);
      assertEquals(42, smartSpeaker0.getVolume());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("A{", 94, "A{", "A{", 94);
      SmartSpeaker smartSpeaker1 = new SmartSpeaker("ID: A{\n\tOn: false;\n\tConsumo Base: 94.0;\n\tVolume: 94; \tMarca: A{; \tCanal: A{\n", 100, "A{", "A{", 100);
      boolean boolean0 = smartSpeaker0.equals(smartSpeaker1);
      assertEquals("A{", smartSpeaker1.getChannel());
      assertEquals(94, smartSpeaker0.getVolume());
      assertEquals("A{", smartSpeaker1.getMarca());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("A{", 94, "A{", "A{", 94);
      boolean boolean0 = smartSpeaker0.equals("ID: A{\n\tOn: false;\n\tConsumo Base: 94.0;\n\tVolume: 94; \tMarca: A{; \tCanal: A{\n");
      assertFalse(boolean0);
      assertEquals(94, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("A{", 94, "A{", "A{", 94);
      boolean boolean0 = smartSpeaker0.equals((Object) null);
      assertEquals(88.36, smartSpeaker0.consumoDiario(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("W620/LwO{", true, (-984), "W620/LwO{", "W620/LwO{", (-984));
      boolean boolean0 = smartSpeaker0.equals(smartSpeaker0);
      assertTrue(boolean0);
      assertEquals((-984), smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("{", 43, "{", "z", 43);
      SmartSpeaker smartSpeaker1 = new SmartSpeaker(smartSpeaker0);
      assertEquals("z", smartSpeaker1.getChannel());
      
      smartSpeaker1.setChannel("{");
      boolean boolean0 = smartSpeaker0.equals(smartSpeaker1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("{", 43, "{", "z", 43);
      smartSpeaker0.setVolume(43);
      assertEquals(18.49, smartSpeaker0.consumoDiario(), 0.01);
      assertEquals("{", smartSpeaker0.getMarca());
      assertEquals("z", smartSpeaker0.getChannel());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("W620/LwO{", true, (-984), "W620/LwO{", "W620/LwO{", (-984));
      smartSpeaker0.setVolume((-984));
      assertEquals(0, smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("W620/LwO{", true, (-984), "W620/LwO{", "W620/LwO{", (-984));
      smartSpeaker0.volumeDown();
      assertEquals((-984), smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("W620/LwO{", true, (-984), "W620/LwO{", "W620/LwO{", (-984));
      smartSpeaker0.volumeUp();
      assertEquals((-983), smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("A{", 94, "A{", "A{", 94);
      assertEquals(94, smartSpeaker0.getVolume());
      
      smartSpeaker0.setVolume(100);
      smartSpeaker0.volumeUp();
      assertEquals(94.0, smartSpeaker0.consumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker(",HrGV:LkQ<fi'o14", true, (-1983), ",HrGV:LkQ<fi'o14", ",HrGV:LkQ<fi'o14", (-193.871598853106));
      smartSpeaker0.turnSpeakerOff();
      assertEquals(3844.473805257092, smartSpeaker0.consumoDiario(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker(",HrGV:LkQ<fi'o14", true, (-1983), ",HrGV:LkQ<fi'o14", ",HrGV:LkQ<fi'o14", (-193.871598853106));
      String string0 = smartSpeaker0.toString();
      assertEquals("ID: ,HrGV:LkQ<fi'o14\n\tOn: true;\n\tConsumo Base: -193.871598853106;\n\tVolume: -1983; \tMarca: ,HrGV:LkQ<fi'o14; \tCanal: ,HrGV:LkQ<fi'o14\n", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker(",HrGV:LkQ<fi'o14", true, (-1983), ",HrGV:LkQ<fi'o14", ",HrGV:LkQ<fi'o14", (-193.871598853106));
      smartSpeaker0.turnSpeakerOn();
      assertEquals((-1983), smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("W620/LwO{", true, (-984), "W620/LwO{", "W620/LwO{", (-984));
      SmartDevice smartDevice0 = smartSpeaker0.clone();
      boolean boolean0 = smartSpeaker0.equals(smartDevice0);
      assertTrue(boolean0);
      assertEquals((-984), smartSpeaker0.getVolume());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        SmartSpeaker.parseSmartSpeaker("ID: ,HrGV:LkQ<fM<}'o14\n\tOn: true;\n\tConsumo Base: -1948.0;\n\tVolume: -1948; \tMarca: ID: ,HrGV:LkQ<fM<}'o14\n\tOn: true;\n\tConsumo Base: -1948.0;\n\tVolume: -1948; \tMarca: ,HrGV:LkQ<fM<}'o14; \tCanal: ,HrGV:LkQ<fM<}'o14\n; \tCanal: ,HrGV:LkQ<fM<}'o14\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ID: \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SmartSpeaker smartSpeaker0 = new SmartSpeaker("A{", 94, "A{", "A{", 94);
      double double0 = smartSpeaker0.consumoDiario();
      assertEquals(88.36, double0, 0.01);
  }
}
