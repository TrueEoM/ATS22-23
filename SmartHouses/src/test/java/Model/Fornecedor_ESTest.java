/*
 * This file was automatically generated by EvoSuite
 * Wed May 10 16:48:25 GMT 2023
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.CasaInteligente;
import Model.Fatura;
import Model.Formulas.FormulaCoopernico;
import Model.Formulas.FormulaEDA;
import Model.Formulas.FormulaEnergia;
import Model.Formulas.FormulaGalp;
import Model.Formulas.FormulaIberdrola;
import Model.Formulas.FormulaMuon;
import Model.Fornecedor;
import java.time.Clock;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fornecedor_ESTest extends Fornecedor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FormulaIberdrola formulaIberdrola0 = new FormulaIberdrola();
      Fornecedor fornecedor0 = new Fornecedor((-1.0), "", formulaIberdrola0);
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      LocalDate localDate0 = MockLocalDate.from(localDateTime0);
      LocalTime localTime0 = MockLocalTime.ofSecondOfDay(1168L);
      LocalDateTime localDateTime1 = MockLocalDateTime.of(localDate0, localTime0);
      fornecedor0.compareTo(fornecedor0, localDateTime1, localDateTime0);
      assertEquals((-1.0), fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "", (FormulaEnergia) null);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      CasaInteligente casaInteligente0 = new CasaInteligente("", "", 10, "", "");
      fornecedor0.addCasa(casaInteligente0);
      // Undeclared exception!
      try { 
        fornecedor0.compareTo(fornecedor0, localDateTime0, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "Uf", (FormulaEnergia) null);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      CasaInteligente casaInteligente0 = new CasaInteligente("Uf", "Uf", (-8), "Uf", "Uf");
      fornecedor0.addCasa(casaInteligente0);
      // Undeclared exception!
      try { 
        fornecedor0.addFatura((LocalDateTime) null, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FormulaIberdrola formulaIberdrola0 = new FormulaIberdrola();
      Fornecedor fornecedor0 = new Fornecedor(0L, "Imposto: ", formulaIberdrola0);
      CasaInteligente casaInteligente0 = new CasaInteligente((String) null, (String) null, (-35), (String) null, (String) null);
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      fornecedor0.addFatura((LocalDateTime) null, (LocalDateTime) null);
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, FormulaEnergia> hashMap0 = new HashMap<String, FormulaEnergia>();
      Fornecedor fornecedor0 = Fornecedor.parseFornecedor("0-|y<,0,<oD@,", hashMap0);
      assertEquals("0-|y<", fornecedor0.getId());
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, FormulaEnergia> hashMap0 = new HashMap<String, FormulaEnergia>();
      Fornecedor fornecedor0 = Fornecedor.parseFornecedor("0-|x<,2,<o$@,", hashMap0);
      assertEquals(2.0, fornecedor0.getImposto(), 0.01);
      assertEquals("0-|x<", fornecedor0.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FormulaIberdrola formulaIberdrola0 = new FormulaIberdrola();
      Fornecedor fornecedor0 = new Fornecedor(0L, "Imposto: ", formulaIberdrola0);
      CasaInteligente casaInteligente0 = new CasaInteligente("Imposto: ", "Imposto: ", (-35), "Imposto: ", "Imposto: ");
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      double double0 = fornecedor0.getValorFornecedor("Imposto: ", (LocalDateTime) null, (LocalDateTime) null, 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FormulaGalp formulaGalp0 = new FormulaGalp();
      Fornecedor fornecedor0 = new Fornecedor(0.0, ",", formulaGalp0);
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente(";", "P!g}_$}miMYnb>#2", (-2013265918), ";", "Model.Formulas.FormulaSUElectricidade");
      hashMap0.put("Model.Formulas.FormulaSUElectricidade", casaInteligente0);
      fornecedor0.setAllCasas(hashMap0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      double double0 = fornecedor0.getValorFornecedor("Model.Formulas.FormulaSUElectricidade", localDateTime0, localDateTime0, 0.2);
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
      assertEquals(2.04, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("", 0.2);
      double double0 = fornecedor0.getImposto();
      assertEquals(0.2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FormulaMuon formulaMuon0 = new FormulaMuon();
      Fornecedor fornecedor0 = new Fornecedor((-2031.607475084809), "Imposto: ", formulaMuon0);
      double double0 = fornecedor0.getImposto();
      assertEquals((-2031.607475084809), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor((String) null, (-855.637844541109));
      fornecedor0.getId();
      assertEquals((-855.637844541109), fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("G^3L", 3823.5237);
      fornecedor0.getId();
      assertEquals(3823.5237, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FormulaEDA formulaEDA0 = new FormulaEDA();
      Fornecedor fornecedor0 = new Fornecedor(1.8, "{'$[f", formulaEDA0);
      fornecedor0.getFormula();
      assertEquals(1.8, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "", (FormulaEnergia) null);
      CasaInteligente casaInteligente0 = new CasaInteligente("", "", 10, "", "");
      casaInteligente0.setNIF(0);
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      fornecedor0.getCasaWithoutExceptions("");
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "", (FormulaEnergia) null);
      CasaInteligente casaInteligente0 = new CasaInteligente("", "", 10, "", "");
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      fornecedor0.getCasaWithoutExceptions("");
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "", (FormulaEnergia) null);
      CasaInteligente casaInteligente0 = new CasaInteligente("", "", (-22), "", "");
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      fornecedor0.getCasaWithoutExceptions("");
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "", (FormulaEnergia) null);
      CasaInteligente casaInteligente0 = new CasaInteligente("", "", 10, "", "");
      casaInteligente0.setNIF(0);
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      fornecedor0.getCasa("");
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FormulaIberdrola formulaIberdrola0 = new FormulaIberdrola();
      Fornecedor fornecedor0 = new Fornecedor(0L, "Imposto: ", formulaIberdrola0);
      CasaInteligente casaInteligente0 = new CasaInteligente("Imposto: ", "Imposto: ", 3, "Imposto: ", "Imposto: ");
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      fornecedor0.getCasa("Imposto: ");
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "", (FormulaEnergia) null);
      CasaInteligente casaInteligente0 = new CasaInteligente("", "", (-22), "", "");
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      fornecedor0.getAllCasas();
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      CasaInteligente casaInteligente0 = new CasaInteligente("?gNu(_zjOH+-[", "?gNu(_zjOH+-[", 10, "?gNu(_zjOH+-[", "?gNu(_zjOH+-[");
      FormulaCoopernico formulaCoopernico0 = new FormulaCoopernico();
      Fornecedor fornecedor0 = new Fornecedor(857.43685790055, "*idJ?P8-E<#bB", formulaCoopernico0);
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      double double0 = fornecedor0.faturaçaoFornecedor(localDateTime0, localDateTime0);
      assertEquals(859.43685790055, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FormulaGalp formulaGalp0 = new FormulaGalp();
      Fornecedor fornecedor0 = new Fornecedor((-23.622662857891527), ",", formulaGalp0);
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente(",", ",", (-2013265918), ",", ",");
      hashMap0.put(",", casaInteligente0);
      fornecedor0.setAllCasas(hashMap0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      double double0 = fornecedor0.faturaçaoFornecedor(localDateTime0, localDateTime0);
      assertEquals((-21.622662857891527), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("N$Uiu'EI", (-0.6726708994677377));
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      CasaInteligente casaInteligente0 = new CasaInteligente("N$Uiu'EI", "N$Uiu'EI", 51, "N$Uiu'EI", "N$Uiu'EI");
      casaInteligente0.addFatura("N$Uiu'EI", localDateTime0, localDateTime0, 51);
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      List<Fatura> list0 = fornecedor0.faturasEmitidas();
      assertEquals((-0.6726708994677377), fornecedor0.getImposto(), 0.01);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FormulaIberdrola formulaIberdrola0 = new FormulaIberdrola();
      Fornecedor fornecedor0 = new Fornecedor(31L, "Imposto: ", formulaIberdrola0);
      CasaInteligente casaInteligente0 = new CasaInteligente((String) null, (String) null, (-35), (String) null, (String) null);
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      Fornecedor fornecedor1 = new Fornecedor("Imposto: ", 31L);
      double double0 = fornecedor0.compareTo(fornecedor1, (LocalDateTime) null, (LocalDateTime) null);
      assertEquals(1.0, double0, 0.01);
      assertEquals(31.0, fornecedor1.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FormulaIberdrola formulaIberdrola0 = new FormulaIberdrola();
      Fornecedor fornecedor0 = new Fornecedor((-12L), "Imposto: ", formulaIberdrola0);
      CasaInteligente casaInteligente0 = new CasaInteligente((String) null, (String) null, (-35), (String) null, (String) null);
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      Fornecedor fornecedor1 = new Fornecedor("Imposto: ", (-12L));
      double double0 = fornecedor0.compareTo(fornecedor1, (LocalDateTime) null, (LocalDateTime) null);
      assertEquals((-1.0), double0, 0.01);
      assertEquals((-12.0), fornecedor1.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor((-0.8682787798949795), "", (FormulaEnergia) null);
      Fornecedor fornecedor1 = fornecedor0.clone();
      assertEquals((-0.8682787798949795), fornecedor1.getImposto(), 0.01);
      assertTrue(fornecedor1.equals((Object)fornecedor0));
      assertEquals((-0.8682787798949795), fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("", 0.2);
      // Undeclared exception!
      try { 
        fornecedor0.setAllCasas((Map<String, CasaInteligente>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fornecedor.parseFornecedor("Rff71uH>H&,f\"ea[", (Map<String, FormulaEnergia>) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<String, FormulaEnergia> hashMap0 = new HashMap<String, FormulaEnergia>();
      // Undeclared exception!
      try { 
        Fornecedor.parseFornecedor((String) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FormulaIberdrola formulaIberdrola0 = new FormulaIberdrola();
      Fornecedor fornecedor0 = new Fornecedor((-1.0), "", formulaIberdrola0);
      Clock clock0 = MockClock.systemUTC();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(clock0);
      // Undeclared exception!
      try { 
        fornecedor0.getValorFornecedor("\"#..", localDateTime0, localDateTime0, (-427.028197518));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor((-11.561383614881763), (String) null, (FormulaEnergia) null);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      CasaInteligente casaInteligente0 = new CasaInteligente("q", "q", 33, "q", "q");
      casaInteligente0.addFatura("q", localDateTime0, localDateTime0, 33);
      fornecedor0.addCasa(casaInteligente0);
      // Undeclared exception!
      try { 
        fornecedor0.faturasEmitidas();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor((-11.561383614881763), "", (FormulaEnergia) null);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      CasaInteligente casaInteligente0 = new CasaInteligente("", "", 33, "", "");
      casaInteligente0.addFatura((String) null, localDateTime0, localDateTime0, 33);
      fornecedor0.addCasa(casaInteligente0);
      // Undeclared exception!
      try { 
        fornecedor0.casaGastouMaisPeriodo(localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.CasaInteligente", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("rgqjNg<;u", 1029.65728169724);
      // Undeclared exception!
      try { 
        fornecedor0.addCasa((CasaInteligente) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fornecedor fornecedor0 = null;
      try {
        fornecedor0 = new Fornecedor((Fornecedor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FormulaGalp formulaGalp0 = new FormulaGalp();
      Fornecedor fornecedor0 = new Fornecedor((-23.622662857891527), ",", formulaGalp0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      double double0 = fornecedor0.faturaçaoFornecedor(localDateTime0, localDateTime0);
      assertEquals((-23.622662857891527), fornecedor0.getImposto(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FormulaGalp formulaGalp0 = new FormulaGalp();
      Fornecedor fornecedor0 = new Fornecedor((-2.08695112483752), ",", formulaGalp0);
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("Model.CasaInteligente", "P!g}_$}miMYnb>#2", (-2013265918), "Model.CasaInteligente", "Model.Formulas.FormulaSUElectricidade");
      hashMap0.put("%4b*'C}j&2:<y", casaInteligente0);
      fornecedor0.setAllCasas(hashMap0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      // Undeclared exception!
      try { 
        fornecedor0.faturaçaoFornecedor(localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "", (FormulaEnergia) null);
      CasaInteligente casaInteligente0 = new CasaInteligente("", "", 10, "", "");
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      fornecedor0.hasCasa("");
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "Imposto: ", (FormulaEnergia) null);
      fornecedor0.hasCasa("Imposto: ");
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("", 1.8);
      fornecedor0.getAllCasas();
      assertEquals(1.8, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "Imposto: ", (FormulaEnergia) null);
      fornecedor0.getFormula();
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "Imposto: ", (FormulaEnergia) null);
      double double0 = fornecedor0.getImposto();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "", (FormulaEnergia) null);
      // Undeclared exception!
      try { 
        fornecedor0.getCasaWithoutExceptions("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "Uf", (FormulaEnergia) null);
      CasaInteligente casaInteligente0 = new CasaInteligente("Uf", "Uf", 1, "Uf", "Uf");
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      fornecedor0.faturasEmitidas();
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor((-11.561383614881763), (String) null, (FormulaEnergia) null);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      CasaInteligente casaInteligente0 = new CasaInteligente("q", "q", 33, "q", "q");
      casaInteligente0.addFatura("q", localDateTime0, localDateTime0, 33);
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      String string0 = fornecedor0.casaGastouMaisPeriodo(localDateTime0, localDateTime0);
      assertEquals((-11.561383614881763), fornecedor0.getImposto(), 0.01);
      assertEquals("q", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "q", (FormulaEnergia) null);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      CasaInteligente casaInteligente0 = new CasaInteligente("q", "q", (-1726), "q", "q");
      casaInteligente0.addFatura("q", localDateTime0, localDateTime0, (-1726));
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      String string0 = fornecedor0.casaGastouMaisPeriodo(localDateTime0, localDateTime0);
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "Uf", (FormulaEnergia) null);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      CasaInteligente casaInteligente0 = new CasaInteligente("Uf", "Uf", 1, "Uf", "Uf");
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      String string0 = fornecedor0.casaGastouMaisPeriodo(localDateTime0, localDateTime0);
      assertEquals("", string0);
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "", (FormulaEnergia) null);
      CasaInteligente casaInteligente0 = new CasaInteligente("", "", (-22), "", "");
      fornecedor0.addCasa(casaInteligente0);
      Fornecedor fornecedor1 = fornecedor0.clone();
      assertTrue(fornecedor1.equals((Object)fornecedor0));
      
      fornecedor1.removeCasa("");
      boolean boolean0 = fornecedor0.equals(fornecedor1);
      assertFalse(fornecedor1.equals((Object)fornecedor0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor((String) null, 0.0);
      Fornecedor fornecedor1 = new Fornecedor("L;MB", 0.0);
      boolean boolean0 = fornecedor0.equals(fornecedor1);
      assertFalse(boolean0);
      assertEquals(0.0, fornecedor1.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("Model.Exceptions.RoomNotExistsException", 100.0);
      Fornecedor fornecedor1 = new Fornecedor(fornecedor0);
      boolean boolean0 = fornecedor1.equals(fornecedor0);
      assertEquals(100.0, fornecedor0.getImposto(), 0.01);
      assertEquals(100.0, fornecedor1.getImposto(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FormulaIberdrola formulaIberdrola0 = new FormulaIberdrola();
      Fornecedor fornecedor0 = new Fornecedor((-12L), "Imposto: ", formulaIberdrola0);
      boolean boolean0 = fornecedor0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((-12.0), fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("Model.Exceptions.RoomNotExistsException", 100.0);
      boolean boolean0 = fornecedor0.equals(fornecedor0);
      assertTrue(boolean0);
      assertEquals(100.0, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "", (FormulaEnergia) null);
      boolean boolean0 = fornecedor0.equals("");
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "", (FormulaEnergia) null);
      int int0 = fornecedor0.removeCasa("");
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "", (FormulaEnergia) null);
      CasaInteligente casaInteligente0 = new CasaInteligente("", "", 10, "", "");
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      int int1 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("Model.Exceptions.RoomNotExistsException", 100.0);
      try { 
        fornecedor0.getCasa((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // A casa com id null n\u00E3o existe
         //
         verifyException("Model.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor(0.0, "", (FormulaEnergia) null);
      CasaInteligente casaInteligente0 = new CasaInteligente("", "", (-22), "", "");
      int int0 = fornecedor0.addCasa(casaInteligente0);
      assertEquals(0, int0);
      
      fornecedor0.getCasa("");
      assertEquals(0.0, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("0ghj", 3.822285133383552);
      fornecedor0.setId("0ghj");
      assertEquals(3.822285133383552, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("Model.Exceptions.RoomNotExistsException", 100.0);
      String string0 = fornecedor0.toString();
      assertEquals("Id: Model.Exceptions.RoomNotExistsException; Imposto: 100.0;\n", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("Mdel.Exceptions.RoomNotExstsException", 99.69093315605646);
      fornecedor0.setImposto(99.69093315605646);
      assertEquals(99.69093315605646, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("", 0.2);
      FormulaCoopernico formulaCoopernico0 = new FormulaCoopernico();
      fornecedor0.setFormula(formulaCoopernico0);
      assertEquals(0.2, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<String, FormulaEnergia> hashMap0 = new HashMap<String, FormulaEnergia>();
      // Undeclared exception!
      try { 
        Fornecedor.parseFornecedor("Imposto: ", hashMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("Model.Fornecedor", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("", 0.2);
      Fornecedor fornecedor1 = fornecedor0.clone();
      assertEquals(0.2, fornecedor1.getImposto(), 0.01);
      assertEquals(0.2, fornecedor0.getImposto(), 0.01);
      assertTrue(fornecedor1.equals((Object)fornecedor0));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fornecedor fornecedor0 = new Fornecedor("", 0.2);
      fornecedor0.getId();
      assertEquals(0.2, fornecedor0.getImposto(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FormulaGalp formulaGalp0 = new FormulaGalp();
      Fornecedor fornecedor0 = new Fornecedor((-2.08695112483752), ",", formulaGalp0);
      HashMap<String, CasaInteligente> hashMap0 = new HashMap<String, CasaInteligente>();
      CasaInteligente casaInteligente0 = new CasaInteligente("Model.CasaInteligente", "P!g}_$}miMYnb>#2", (-2013265918), "Model.CasaInteligente", "Model.Formulas.FormulaSUElectricidade");
      hashMap0.put("Model.Formulas.FormulaSUElectricidade", casaInteligente0);
      fornecedor0.setAllCasas(hashMap0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      double double0 = fornecedor0.getValorFornecedor("Model.Formulas.FormulaSUElectricidade", localDateTime0, localDateTime0, 0.2);
      assertEquals((-0.04695112483751987), double0, 0.01);
  }
}
