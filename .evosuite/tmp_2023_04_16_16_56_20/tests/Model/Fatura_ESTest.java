/*
 * This file was automatically generated by EvoSuite
 * Sun Apr 16 16:12:13 GMT 2023
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Fatura;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fatura_ESTest extends Fatura_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, 1, 1, 1, 1, 1, 1);
      Fatura fatura0 = new Fatura(1909.425617, "hM]t\")7", localDateTime0, localDateTime0, "hM]t\")7", 1, "hM]t\")7", 1.0);
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setConsumo((-1));
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals((-1.0), fatura1.getConsumo(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura(1889.1806276, "{MTM\"7", localDateTime0, localDateTime0, "{MTM\"7", 32, "{MTM\"7", 32);
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setNIF(1);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(1, fatura1.getNIF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, 1, 1, 1, 1, 1, 1);
      Fatura fatura0 = new Fatura(1909.425617, "hM]t\")7", localDateTime0, localDateTime0, "hM]t\")7", 1, "hM]t\")7", 1.0);
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setValor(1.0430223128267415);
      boolean boolean0 = fatura1.equals(fatura0);
      assertEquals(1.0430223128267415, fatura1.getValor(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fatura fatura0 = new Fatura(1.0, "", (LocalDateTime) null, (LocalDateTime) null, "", 63, "\"9sG[Cp/-^tw", 156.14187317);
      double double0 = fatura0.getValor();
      assertEquals(156.14187317, double0, 0.01);
      assertEquals(1.0, fatura0.getConsumo(), 0.01);
      assertEquals("", fatura0.getIdFatura());
      assertEquals("", fatura0.getMorada());
      assertEquals("\"9sG[Cp/-^tw", fatura0.getIdFornecedor());
      assertEquals(63, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setValor((-611.141));
      double double0 = fatura0.getValor();
      assertEquals((-611.141), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fatura fatura0 = new Fatura(1.0, "", (LocalDateTime) null, (LocalDateTime) null, "", 63, "\"9sG[Cp/-^tw", 156.14187317);
      int int0 = fatura0.getNIF();
      assertEquals("\"9sG[Cp/-^tw", fatura0.getIdFornecedor());
      assertEquals(63, int0);
      assertEquals("", fatura0.getMorada());
      assertEquals(156.14187317, fatura0.getValor(), 0.01);
      assertEquals(1.0, fatura0.getConsumo(), 0.01);
      assertEquals("", fatura0.getIdFatura());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setNIF((-72));
      int int0 = fatura0.getNIF();
      assertEquals((-72), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond((-1L), 0, zoneOffset0);
      Fatura fatura0 = new Fatura(0.0, "", localDateTime0, localDateTime0, (String) null, 241, (String) null, 0);
      String string0 = fatura0.getMorada();
      assertEquals(0.0, fatura0.getValor(), 0.01);
      assertEquals(241, fatura0.getNIF());
      assertNull(string0);
      assertEquals(0.0, fatura0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setMorada("9A;!m.S]35{YO`");
      fatura0.getMorada();
      assertEquals(0, fatura0.getNIF());
      assertEquals(0.0, fatura0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.getInicio();
      assertEquals(0, fatura0.getNIF());
      assertEquals(0.0, fatura0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutesSeconds(0, 0, 0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond((-1L), 0, zoneOffset0);
      Fatura fatura0 = new Fatura(0.0, "", localDateTime0, localDateTime0, (String) null, 241, (String) null, 0);
      String string0 = fatura0.getIdFornecedor();
      assertEquals(0.0, fatura0.getConsumo(), 0.01);
      assertNull(string0);
      assertEquals(241, fatura0.getNIF());
      assertEquals(0.0, fatura0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1452);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond((-1126L), 1452, zoneOffset0);
      Fatura fatura0 = new Fatura((-826.932185789435), (String) null, localDateTime0, localDateTime0, "\nValor: ", 0, "\nValor: ", (-1126L));
      String string0 = fatura0.getIdFatura();
      assertEquals(0, fatura0.getNIF());
      assertNull(string0);
      assertEquals((-1126.0), fatura0.getValor(), 0.01);
      assertEquals((-826.932185789435), fatura0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setIdFatura("a4P =/Jlq{p49@");
      fatura0.getIdFatura();
      assertEquals(0.0, fatura0.getValor(), 0.01);
      assertEquals(0, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura(374.41386159, "pS1-f`law+ H$", localDateTime0, localDateTime0, "pS1-f`law+ H$", (-3535), "\nValor: ", (-3535));
      fatura0.getFim();
      assertEquals("pS1-f`law+ H$", fatura0.getIdFatura());
      assertEquals("\nValor: ", fatura0.getIdFornecedor());
      assertEquals(374.41386159, fatura0.getConsumo(), 0.01);
      assertEquals("pS1-f`law+ H$", fatura0.getMorada());
      assertEquals((-3535.0), fatura0.getValor(), 0.01);
      assertEquals((-3535), fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setConsumo(1.0);
      double double0 = fatura0.getConsumo();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setConsumo((-1809.269648));
      double double0 = fatura0.getConsumo();
      assertEquals((-1809.269648), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = fatura0.clone();
      assertEquals(0.0, fatura0.getConsumo(), 0.01);
      assertEquals(0.0, fatura0.getValor(), 0.01);
      assertEquals(0, fatura1.getNIF());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fatura fatura0 = new Fatura((-2739.51118091173), "", (LocalDateTime) null, (LocalDateTime) null, "'7t%k@C", (-1), "", (-1));
      Fatura fatura1 = fatura0.clone();
      assertEquals("", fatura1.getIdFatura());
      assertEquals("'7t%k@C", fatura1.getMorada());
      assertEquals((-1.0), fatura1.getValor(), 0.01);
      assertEquals("", fatura1.getIdFornecedor());
      assertEquals((-1.0), fatura0.getValor(), 0.01);
      assertEquals((-1), fatura0.getNIF());
      assertEquals((-2739.51118091173), fatura0.getConsumo(), 0.01);
      assertEquals((-1), fatura1.getNIF());
      assertEquals((-2739.51118091173), fatura1.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      int int0 = fatura0.getNIF();
      assertEquals(0.0, fatura0.getValor(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.getMorada();
      assertEquals(0, fatura0.getNIF());
      assertEquals(0.0, fatura0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      double double0 = fatura0.getValor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.getFim();
      assertEquals(0, fatura0.getNIF());
      assertEquals(0.0, fatura0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.getIdFornecedor();
      assertEquals(0, fatura0.getNIF());
      assertEquals(0.0, fatura0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      double double0 = fatura0.getConsumo();
      assertEquals(0, fatura0.getNIF());
      assertEquals(0.0, fatura0.getValor(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.getIdFatura();
      assertEquals(0.0, fatura0.getValor(), 0.01);
      assertEquals(0, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura(14.269132215479281, "", localDateTime0, localDateTime0, "", (-516), "", 14.269132215479281);
      fatura0.getInicio();
      assertEquals((-516), fatura0.getNIF());
      assertEquals(14.269132215479281, fatura0.getValor(), 0.01);
      assertEquals(14.269132215479281, fatura0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, 1, 1, 1, 1, 1);
      Fatura fatura0 = new Fatura(1938.439433125376, "hnMm$jS]O\"7", localDateTime0, localDateTime0, "hnMm$jS]O\"7", 1, "hnMm$jS]O\"7", 1938.439433125376);
      Fatura fatura1 = fatura0.clone();
      fatura1.setConsumo(1);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(1.0, fatura1.getConsumo(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura(1938.1104676835246, ".M\"7", localDateTime0, localDateTime0, ".M\"7", (-1161538457), ".M\"7", (-1161538457));
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setNIF((-293093040));
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals((-293093040), fatura1.getNIF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-3726.1529340570623), "M<`\"7", localDateTime0, localDateTime0, "M<`\"7", 5019, "M<`\"7", (-3726.1529340570623));
      Fatura fatura1 = new Fatura(fatura0);
      assertTrue(fatura1.equals((Object)fatura0));
      
      fatura1.setMorada("M:]\"7");
      boolean boolean0 = fatura0.equals(fatura1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, 1, 1, 1, 1, 1);
      Fatura fatura0 = new Fatura(1938.439433125376, "hnMm$jS]O\"7", localDateTime0, localDateTime0, "hnMm$jS]O\"7", 1, "hnMm$jS]O\"7", 1938.439433125376);
      Fatura fatura1 = new Fatura(1938.439433125376, "hnMm$jS]O\"7", localDateTime0, localDateTime0, "hnMm$jS]O\"7", 1, "hnMm$jS]O\"7", 1);
      boolean boolean0 = fatura1.equals(fatura0);
      assertFalse(fatura0.equals((Object)fatura1));
      assertEquals(1938.439433125376, fatura1.getConsumo(), 0.01);
      assertEquals(1, fatura1.getNIF());
      assertFalse(boolean0);
      assertEquals(1.0, fatura1.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-2922.372501696533), "", localDateTime0, localDateTime0, "", 42, "", (-2922.372501696533));
      Fatura fatura1 = new Fatura();
      fatura1.setFim(localDateTime0);
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals((-2922.372501696533), fatura0.getValor(), 0.01);
      assertFalse(boolean0);
      assertEquals(0, fatura1.getNIF());
      assertEquals(0.0, fatura1.getValor(), 0.01);
      assertEquals((-2922.372501696533), fatura0.getConsumo(), 0.01);
      assertEquals(42, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, 1, 1, 1, 1, 1);
      Fatura fatura0 = new Fatura(1938.439433125376, "hnMm$jS]O\"7", localDateTime0, localDateTime0, "hnMm$jS]O\"7", 1, "hnMm$jS]O\"7", 1938.439433125376);
      Fatura fatura1 = fatura0.clone();
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(1938.439433125376, fatura0.getValor(), 0.01);
      assertEquals(1938.439433125376, fatura1.getConsumo(), 0.01);
      assertTrue(boolean0);
      assertEquals(1, fatura1.getNIF());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-2922.372501696533), "", localDateTime0, localDateTime0, "", 42, "", (-2922.372501696533));
      Fatura fatura1 = new Fatura();
      boolean boolean0 = fatura0.equals(fatura1);
      assertFalse(boolean0);
      assertEquals(0, fatura1.getNIF());
      assertEquals(42, fatura0.getNIF());
      assertEquals((-2922.372501696533), fatura0.getConsumo(), 0.01);
      assertEquals(0.0, fatura1.getValor(), 0.01);
      assertEquals((-2922.372501696533), fatura0.getValor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura0.setIdFornecedor("v");
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(0, fatura1.getNIF());
      assertEquals(0.0, fatura0.getValor(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, fatura0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      Fatura fatura1 = new Fatura(fatura0);
      fatura1.setIdFatura("N");
      boolean boolean0 = fatura0.equals(fatura1);
      assertEquals(0, fatura1.getNIF());
      assertFalse(boolean0);
      assertEquals(0.0, fatura0.getValor(), 0.01);
      assertEquals(0.0, fatura0.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-3726.1529340570623), "M<`\"7", localDateTime0, localDateTime0, "M<`\"7", 5019, "M<`\"7", (-3726.1529340570623));
      boolean boolean0 = fatura0.equals("M:]\"7");
      assertEquals((-3726.1529340570623), fatura0.getValor(), 0.01);
      assertFalse(boolean0);
      assertEquals((-3726.1529340570623), fatura0.getConsumo(), 0.01);
      assertEquals(5019, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fatura fatura0 = new Fatura(1.0, "", (LocalDateTime) null, (LocalDateTime) null, "", 63, "\"9sG[Cp/-^tw", 156.14187317);
      boolean boolean0 = fatura0.equals(fatura0);
      assertEquals("", fatura0.getMorada());
      assertEquals("\"9sG[Cp/-^tw", fatura0.getIdFornecedor());
      assertEquals(156.14187317, fatura0.getValor(), 0.01);
      assertTrue(boolean0);
      assertEquals(63, fatura0.getNIF());
      assertEquals(1.0, fatura0.getConsumo(), 0.01);
      assertEquals("", fatura0.getIdFatura());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fatura fatura0 = new Fatura(1.0, "", (LocalDateTime) null, (LocalDateTime) null, "", 63, "\"9sG[Cp/-^tw", 156.14187317);
      boolean boolean0 = fatura0.equals((Object) null);
      assertEquals(156.14187317, fatura0.getValor(), 0.01);
      assertFalse(boolean0);
      assertEquals("\"9sG[Cp/-^tw", fatura0.getIdFornecedor());
      assertEquals("", fatura0.getIdFatura());
      assertEquals("", fatura0.getMorada());
      assertEquals(1.0, fatura0.getConsumo(), 0.01);
      assertEquals(63, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fatura fatura0 = new Fatura(1.0, "", (LocalDateTime) null, (LocalDateTime) null, "", 63, "\"9sG[Cp/-^tw", 156.14187317);
      String string0 = fatura0.toString();
      assertEquals("", fatura0.getMorada());
      assertEquals("\nIdFatura: \nIdFornecedor: \"9sG[Cp/-^tw\nNIF: 63\nConsumo: 1\nValor: 156.14", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Fatura fatura0 = new Fatura((-3726.1529340570623), "M<`\"7", localDateTime0, localDateTime0, "M<`\"7", 5019, "M<`\"7", (-3726.1529340570623));
      fatura0.setInicio(localDateTime0);
      assertEquals((-3726.1529340570623), fatura0.getValor(), 0.01);
      assertEquals((-3726.1529340570623), fatura0.getConsumo(), 0.01);
      assertEquals(5019, fatura0.getNIF());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fatura fatura0 = new Fatura(1.0, "", (LocalDateTime) null, (LocalDateTime) null, "", 63, "\"9sG[Cp/-^tw", 156.14187317);
      Fatura fatura1 = fatura0.clone();
      // Undeclared exception!
      try { 
        fatura0.equals(fatura1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fatura fatura0 = null;
      try {
        fatura0 = new Fatura((Fatura) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Fatura", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fatura fatura0 = new Fatura();
      fatura0.setIdFornecedor("`:lNl%C/DhRC4jaam/");
      fatura0.getIdFornecedor();
      assertEquals(0.0, fatura0.getValor(), 0.01);
      assertEquals(0, fatura0.getNIF());
  }
}
